// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class settingtable : CsvTable
{
    [System.Serializable]
	public class Row
	{
		public byte a;
		public bool b;
		public float c;

	}

    private List<Row> rowList = new List<Row>();

	public Row this[int index]
    {
        get
        {
            if (rowList.Count > index && index >= 0)
            {
                return rowList[index];
            }
            else
            {
                return null;
            }
        }
    }
    public List<Row> RowList
    {
        get
        {
            return rowList;
        }
    }

	public override void Load(string csvData)
	{
		rowList.Clear();
		grid = ParserCSV.Parse(csvData);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.a = byte.Parse(grid[i][0]);
			row.b = bool.Parse(grid[i][1]);
			row.c = float.Parse(grid[i][2]);

			rowList.Add(row);
		}
		isLoaded = true;
	}
    public override string UnLoad()
    {
        WhileNull();
        for (int i = 1; i < rowList.Count + 1; i++)
        {
            Row row = rowList[i-1];
			grid[i][0] = row.a.ToString();
			grid[i][1] = row.b.ToString();
			grid[i][2] = row.c.ToString();

        }
       return UParserCSV.UParser(grid);
    }

    private void WhileNull()
    {
        grid = new string[rowList.Count + 1][];
			if (grid[0] == null) grid[0] = new string[3];
			grid[0][0] = "a";
			grid[0][1] = "b";
			grid[0][2] = "c";


        for (int i = 1; i<rowList.Count + 1; i++)
        {
			if (grid[i] == null) grid[i] = new string[3];
        }
    }
}